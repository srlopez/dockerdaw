version: '3'
# docker-compose up -d --scale myapi=5
services:

  # Aplicaci칩n WEB node
  myfrontend:
    # docker-compose build myfrontend
    # docker run --rm --name web --network appdocker_default -it -e INNERAPIHOST=lb:80 -e PUBLICAPIHOST=localhost:8888 -p 7077:7077 myfrontend 
    # INNERAPIHOST=localhost:8888 PUBLICAPIHOST=localhost:8888 node appweb.js 
    build: 
      context: ../appweb
      dockerfile: Dockerfile
    image: myfrontend
    container_name: myfrontendc
    environment: 
      PUBLICAPIHOST: "localhost:8888"
      INNERAPIHOST: "mygateway:80"
    ports: 
      - "7077:7077"
    depends_on:
      - mygateway

  # Aplicaci칩n WEB en Laravel con APACHE
  laraweb:
    # docker-compose build laraweb
    # docker run --rm -w /var/www/laravel  -p 9999:80 -v $(PWD)/laravel.env:/var/www/laravel/.env:ro --name l1 -it laraweb:1.0 bash
    #      php artisan serve --host 0.0.0.0 --port 80
    # docker-compose -f docker-compose-lara.yml up -d laraweb   
    # docker run --rm --network daw_default -v `pwd`/laravel.env:/var/www/laravel/.env -p 8081:80 -it laraweb
    build: 
      context: ../applara
      dockerfile: Dockerfile
    image: laraweb
    container_name: laraweb
    volumes:
      - ../applara/laravel.env:/var/www/laravel/.env:ro
    ports: 
      - "8081:80"
    depends_on:
      - mygateway

  # Servicio proxy inverso 
  mygateway:
    image: nginx:latest
    container_name: mygatewayc
    volumes:
      # En la configuraci칩n est치 indicado que el hosts
      # que vamos a acceder es myapi
      # nginx no soporta variables de entorno para conf
      # - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ../appgateway/nginx.conf:/etc/nginx/conf.d/default.conf
      # Necesitamos publicar la port
      # Ya que desde el browser se ha de acceder
      # Y debe ser resulto por DNS fuera de docker
    ports:
      - 8888:80
    depends_on:
      - myapi

  # Servicio de API
  myapi:
    # docker-compose build myapi
    # docker run --rm -it -e MYDBHOST=mydb -e MYPASSWORD=1234 -e MYDATABASE=data --network daw_default -p 7000:7000 myapi
    # http://localhost:7000/api/v1/users   
    build: 
      context: ../appapi
      dockerfile: Dockerfile
    image: myapi
    environment:
      MYDBHOST: mydb
      MYDATABASE: data
      MYUSER: root
      MYPASSWORD: 1234
    expose:
      - "7000"
    # Solo exponemos la puerta --scale myapi=5 se encarga de dirigir
    # ports: 
    #    - "7000:7000"
    depends_on:
      - mydb

  # SQL Service
  # docker run -d --rm --name mysql8 -p 3306:3306 -v $(PWD)/dbdata:/var/lib/mysql mysql:8
  # docker exec -it mysql8 mysql data
  # y podemos ejecutar mydb.sql para crear datos
  mydb:
    image: mysql:8
    container_name: mysqlc
#    ports:
#      - "3306:3306"
    environment:
      MYSQL_DATABASE: data
      MYSQL_ROOT_PASSWORD: 1234
      # MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    volumes:
      - ../appdata/dbdata:/var/lib/mysql

  # GUI para mysql
  # http://localhost:8088    
  # root/(no password)
  mydbadmin:
    image: phpmyadmin/phpmyadmin
    container_name: mydbadminc
    ports:
      - "8088:80"
    environment:
      MYSQL_ROOT_PASSWORD: 1234
      PMA_HOST: mydb
      # MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    depends_on:
      - mydb